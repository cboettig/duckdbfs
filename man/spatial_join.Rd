% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/spatial_join.R
\name{spatial_join}
\alias{spatial_join}
\title{spatial_join}
\usage{
spatial_join(
  x,
  y,
  by = c("st_intersects", "st_within", "st_dwithin", "st_touches", "st_contains",
    "st_containsproperly", "st_covers", "st_overlaps"),
  args = "",
  join = "left",
  tblname = tmp_tbl_name(),
  conn = cached_connection()
)
}
\arguments{
\item{x}{a duckdb table with a spatial geometry column called "geom"}

\item{y}{a duckdb table with a spatial geometry column called "geom"}

\item{by}{A spatial join function.}

\item{args}{additional arguments to join function (e.g. distance for st_dwithin)}

\item{join}{JOIN type (left, right, inner, full)}

\item{tblname}{name for the temporary view}

\item{conn}{the duckdb connection (imputed by duckdbfs by default,
must be shared across both tables)}
}
\value{
a (lazy) view of the resulting table. Users can continue to operate
on using dplyr operations and call to_st() to collect this as an sf object.
}
\description{
spatial_join
}
\examples{
\dontshow{if (interactive()) (if (getRversion() >= "3.4") withAutoprint else force)(\{ # examplesIf}

# note we can read in remote data in a variety of vector formats:
countries <-
paste0("/vsicurl/",
       "https://github.com/cboettig/duckdbfs/",
       "raw/spatial-read/inst/extdata/world.gpkg") |>
open_dataset(format = "sf")

cities <-
 paste0("/vsicurl/https://github.com/cboettig/duckdbfs/raw/",
        "spatial-read/inst/extdata/metro.fgb") |>
 open_dataset(format = "sf")

countries |>
  dplyr::filter(iso_a3 == "AUS") |>
  spatial_join(cities)

# cities within 10 degrees of Australia:
countries |>
  dplyr::filter(iso_a3 == "AUS") |>
  spatial_join(cities, by = "st_dwithin", args = 10)
\dontshow{\}) # examplesIf}
}
